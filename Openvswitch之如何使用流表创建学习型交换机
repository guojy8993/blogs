### 需求描述 ###
假如我们需要构造一个具有 mac自学习以及vlan特性的4端口交换机,端口特性描述如下:
*p1 一个trunk端口,带有所有的vlan,使用 openflow 端口号 1.
*p2 一个access端口,带有vlan20,使用 openflow 端口号 2.
*p3,p4  全部都是vlan30的 access端口,相应地占用openflow端口3,4.
# 端口的名字不重要.
# 一个OpenFlow交换机总是拥有一个 LOCAL 端口的,在该场景下并不会使用该端口.

### 流表规划 ###
我们的交换机设计包含5个主要的流表,每个流表在整个交换机管道中完成数据处理的一个阶段.
Table 0: Admission control(准入控制).
Table 1: VLAN input processing(VLAN 输入控制).
Table 2: Learn source MAC and VLAN for ingress port(交换机入端口学习mac/vlan).
Table 3: Look up learned port for destination MAC and VLAN(根据学习结果为包含指定dest mac与vlan的帧查找对应输出端口).
Table 4: Output processing(输出处理).

### 流表设计与测试 ###
该部分将展示各个流表的详设计:
(1)准备工作:
   a.创建ovs交换机:
   [root@my-pc ~]# ovs-vsctl -- --if-exists del-br ovs-guide \
                             -- add-br ovs-guide  \
                             -- set Bridge ovs-guide fail-mode=secure
   # 在secure模式下,创建出的流表不包含默认流规则
   b.添加4个端口,设置对应openflow端口号:
   [root@my-pc ~]# for i in {1..4};do ovs-vsctl -- --if-exists del-port p$i \
                                                -- add-port ovs-guide p$i \
                                                -- set Interface p$i ofport_request=$i ;done
   # 官方文档 使用 ovs-ofctl mod-port <Bridge> <Port> up,启动port对应的Interface, 但是系统一直
   # 提示找不到对应的,e.g,p1设备,故而此处不予进行此操作.
   # 但是有必要指出 ovs-ofctl mod-port <Bridge> <Port> up 作用类似于 ifconfig <Interface> up 的效果,
   # 但是 ovs interface 对ifconfig是不可见的,不能使用 ifconfig显式启动设备.
   [root@my-pc ~]# ovs-vsctl show
    960b5b7a-d0bd-4ecb-8545-6710c3083e98
    Bridge ovs-guide
        fail_mode: secure
        Port "p4"
            Interface "p4"
        Port "p3"
            Interface "p3"
        Port "p2"
            Interface "p2"
        Port "p1"
            Interface "p1"
        Port ovs-guide
            Interface ovs-guide
                type: internal
    ovs_version: "2.1.3"
 
(2)Table 0设计与测试:
   该表是packet进入交换机的入口.我们使用该表来过滤并丢弃符合这样或那样条件的packets.
   
   例如,包含多播源地址的packet不合法, 我们就在交换机入端口添加一条流表以匹配并丢弃多播包.
   [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00, actions=drop"
   # NOTE:
   # 01:00:00:00:00:00/01:00:00:00:00:00    匹配多播(含广播) Ethernet帧
   # 00:00:00:00:00:00/01:00:00:00:00:00    匹配单播 Ethernet帧
   # man ovs-ofctl 了解更多
   
   又例如,交换机不应该转发 IEEE802.1D 生成树协议(STP)包,我们可以添加流表规则匹配并丢弃之
   [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, actions=drop"
   # 参考 "常见协议与mac地址":http://anonsvn.wireshark.org/wireshark/trunk-1.4/wka.tmpl
   # 说明:在该表中可以添加更多的过滤规则以丢弃不允许进入的数据包,而这正是该表扮演的角色.
   
   最后,一条默认流表规则(较低的优先级)是必须的,用以将经过"准入管理"清洗后的流量导入pipeline的下一个表.
   [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=0, priority=0, actions=resubmit(,1)"
   
   使用专业工具(ofproto/trace)测试table 0效果:
   *使用生成树协议多播包测试
   [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=01:80:c2:00:00:05
   Bridge: ovs-guide
   Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000 # 输入流
   Rule: table=0 cookie=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0    # 匹配到的流规则
   OpenFlow actions=drop    # 采取drop处理
   Final flow: unchanged
   Relevant fields: skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00
                    /ff:ff:ff:ff:ff:f0,dl_type=0x0000
   Datapath actions: drop
   
   *使用 dl_dst=01:80:c2:00:00:10(在01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0范围之外)的包测试
   [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=01:80:c2:00:00:10
   Bridge: ovs-guide
   Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000
   Rule: table=0 cookie=0 priority=0
   OpenFlow actions=resubmit(,1)     # 没有匹配到任何一条drop流规则,使用默认流表规则处理(交给table 1处理)
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop       # 不匹配 table 1的任何流规则,drop
	No match
  Final flow: unchanged
  Relevant fields: skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:10
                   /ff:ff:ff:ff:ff:f0,dl_type=0x0000
  Datapath actions: drop

(3)Table 1设计与测试:
  能进入table 1的包都是经过table 0基本验证的.该表的目标是根据端口的vlan配置验证包的vlan tag. 我们会为到达access端口的包
  添加 vlan header,方便稍后的依赖vlan处理的工作,消除特例.
  添加一条默认规则,drop所有匹配不到规则的流
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=0, actions=drop"
  针对p1: 接受任何不包含vlan header或任意vlan的包,可以添加一条规则:从p1进入的包一律交给table2处理
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=99, in_port=1, actions=resubmit(,2)"
  针对access端口的p2,p3,p4: 接受包,并依据端口vlan配置打上对应 vlan tag
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=99, in_port=2, vlan_tci=0, \
                                                actions=mod_vlan_vid:20, resubmit(,2)"
  [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=1, priority=99, in_port=3, vlan_tci=0, \
                                                actions=mod_vlan_vid:30, resubmit(,2)"
  [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=1, priority=99, in_port=4, vlan_tci=0, \
                                                actions=mod_vlan_vid:30, resubmit(,2)"                                              
  # 我们并未匹配并处理任何从access端口进入的802.1q(vlan协议)包,故而使用默认规则处理(Drop)
  # 而事实上这正是access端口处理这类包的正确方式
  
  使用专业工具(ofproto/trace)测试table 1效果:
  *使用valn_tci=5的包测试trunk端口p1:
  ...
  Resubmitted flow: unchanged
  Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
  Resubmitted  odp: drop
  Rule: table=1 cookie=0 priority=99,in_port=1
  OpenFlow actions=resubmit(,2)         # 从p1端口进入的流量直接交给table2处理
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	No match
  ...
  
  *测试access端口p2(数据包不带vlan header):
  ...
  Resubmitted flow: unchanged
  Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
  Resubmitted  odp: drop
  Rule: table=1 cookie=0 priority=99,in_port=2,vlan_tci=0x0000
  OpenFlow actions=mod_vlan_vid:20,resubmit(,2)    # 从p1端口进入的流量先加vlan header,再交给table2处理
	Resubmitted flow: metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	No match
  ...
  
  *测试access端口(使用不合法数据,带vlan header)
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide  in_port=2,vlan_tci=5
  ...
  Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=1 cookie=0 priority=0
	OpenFlow actions=drop              # 使用默认规则处理
  ...
  
(4)Table 2设计与测试:
  该表允许交换机学习包的源MAC,交换机端口(配置有vlan). 该表是个很好的例子来说明为什么交换机需要给进入access端口
  的包添加 vlan tag. 我们想要将交换机端口与(MAC+VLAN)关联起来,而不必关心vlan是数据包的原始部分抑或是access端口
  关联的vlan值.
    
(5)Table 3设计与测试:
(6)Table 4设计与测试:

It only takes a single flow to do this.  The following command adds
it:

    ovs-ofctl add-flow br0 \
        "table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], \
                               NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \
                               load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]), \
                         resubmit(,3)"

The "learn" action (an Open vSwitch extension to OpenFlow) modifies a
flow table based on the content of the flow currently being processed.
Here's how you can interpret each part of the "learn" action above:

    table=10

        Modify flow table 10.  This will be the MAC learning table.

    NXM_OF_VLAN_TCI[0..11]

        Make the flow that we add to flow table 10 match the same VLAN
        ID that the packet we're currently processing contains.  This
        effectively scopes the MAC learning entry to a single VLAN,
        which is the ordinary behavior for a VLAN-aware switch.

    NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[]

        Make the flow that we add to flow table 10 match, as Ethernet
        destination, the Ethernet source address of the packet we're
        currently processing.

    load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]

        Whereas the preceding parts specify fields for the new flow to
        match, this specifies an action for the flow to take when it
        matches.  The action is for the flow to load the ingress port
        number of the current packet into register 0 (a special field
        that is an Open vSwitch extension to OpenFlow).

> A real use of "learn" for MAC learning would probably involve two
> additional elements.  First, the "learn" action would specify a
> hard_timeout for the new flow, to enable a learned MAC to
> eventually expire if no new packets were seen from a given source
> within a reasonable interval.  Second, one would usually want to
> limit resource consumption by using the Flow_Table table in the
> Open vSwitch configuration database to specify a maximum number of
> flows in table 10.

This definitely calls for examples.


### Testing Table 2

### EXAMPLE 1

Try the following test command:

    ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate

The output shows that "learn" was executed, but it isn't otherwise
informative, so we won't include it here.

The `-generate` keyword is new.  Ordinarily, `ofproto/trace` has no
side effects: "output" actions do not actually output packets, "learn"
actions do not actually modify the flow table, and so on.  With
`-generate`, though, `ofproto/trace` does execute "learn" actions.
That's important now, because we want to see the effect of the "learn"
action on table 10.  You can see that by running:

    ovs-ofctl dump-flows br0 table=10

which (omitting the "duration" and "idle_age" fields, which will vary
based on how soon you ran this command after the previous one, as well
as some other uninteresting fields) prints something like:

    NXST_FLOW reply (xid=0x4):
     table=10, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x1->NXM_NX_REG0[0..15]

You can see that the packet coming in on VLAN 20 with source MAC
50:00:00:00:00:01 became a flow that matches VLAN 20 (written in
hexadecimal) and destination MAC 50:00:00:00:00:01.  The flow loads
port number 1, the input port for the flow we tested, into register 0.


### EXAMPLE 2

Here's a second test command:

    ovs-appctl ofproto/trace br0 in_port=2,dl_src=50:00:00:00:00:01 -generate

The flow that this command tests has the same source MAC and VLAN as
example 1, although the VLAN comes from an access port VLAN rather
than an 802.1Q header.  If we again dump the flows for table 10 with:

    ovs-ofctl dump-flows br0 table=10

then we see that the flow we saw previously has changed to indicate
that the learned port is port 2, as we would expect:

    NXST_FLOW reply (xid=0x4):
     table=10, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x2->NXM_NX_REG0[0..15]


Implementing Table 3: Look Up Destination Port
----------------------------------------------

This table figures out what port we should send the packet to based on
the destination MAC and VLAN.  That is, if we've learned the location
of the destination (from table 2 processing some previous packet with
that destination as its source), then we want to send the packet
there.

We need only one flow to do the lookup:

    ovs-ofctl add-flow br0 \
        "table=3 priority=50 actions=resubmit(,10), resubmit(,4)"

The flow's first action resubmits to table 10, the table that the
"learn" action modifies.  As you saw previously, the learned flows in
this table write the learned port into register 0.  If the destination
for our packet hasn't been learned, then there will be no matching
flow, and so the "resubmit" turns into a no-op.  Because registers are
initialized to 0, we can use a register 0 value of 0 in our next
pipeline stage as a signal to flood the packet.

The second action resubmits to table 4, continuing to the next
pipeline stage.

We can add another flow to skip the learning table lookup for
multicast and broadcast packets, since those should always be flooded:

    ovs-ofctl add-flow br0 \
        "table=3 priority=99 dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 \
          actions=resubmit(,4)"

> We don't strictly need to add this flow, because multicast
> addresses will never show up in our learning table.  (In turn,
> that's because we put a flow into table 0 to drop packets that
> have a multicast source address.)


### Testing Table 3

### EXAMPLE

Here's a command that should cause OVS to learn that f0:00:00:00:00:01
is on p1 in VLAN 20:

    ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 -generate

Here's an excerpt from the output that shows (from the "no match"
looking up the resubmit to table 10) that the flow's destination was
unknown:

			Resubmitted flow: unchanged
			Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
			Resubmitted  odp: drop
			Rule: table=3 cookie=0 priority=50
			OpenFlow actions=resubmit(,10),resubmit(,4)

				Resubmitted flow: unchanged
				Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
				Resubmitted  odp: drop
				No match

You can verify that the packet's source was learned two ways.  The
most direct way is to dump the learning table with:

    ovs-ofctl dump-flows br0 table=10

which ought to show roughly the following, with extraneous details
removed:

    table=10, vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01 actions=load:0x1->NXM_NX_REG0[0..15]

> If you tried the examples for the previous step, or if you did
> some of your own experiments, then you might see additional flows
> there.  These additional flows are harmless.  If they bother you,
> then you can remove them with `ovs-ofctl del-flows br0 table=10`.

The other way is to inject a packet to take advantage of the learning
entry.  For example, we can inject a packet on p2 whose destination is
the MAC address that we just learned on p1:

    ovs-appctl ofproto/trace br0 in_port=2,dl_src=90:00:00:00:00:01,dl_dst=f0:00:00:00:00:01 -generate

Here's an interesting excerpt from that command's output.  This group
of lines traces the "resubmit(,10)", showing that the packet matched
the learned flow for the first MAC we used, loading the OpenFlow port
number for the learned port p1 into register 0:

				Resubmitted flow: unchanged
				Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
				Resubmitted  odp: drop
				Rule: table=10 cookie=0 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01
				OpenFlow actions=load:0x1->NXM_NX_REG0[0..15]


If you read the commands above carefully, then you might have noticed
that they simply have the Ethernet source and destination addresses
exchanged.  That means that if we now rerun the first `ovs-appctl`
command above, e.g.:

    ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 -generate

then we see in the output that the destination has now been learned:

				Resubmitted flow: unchanged
				Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
				Resubmitted  odp: drop
				Rule: table=10 cookie=0 vlan_tci=0x0014/0x0fff,dl_dst=90:00:00:00:00:01
				OpenFlow actions=load:0x2->NXM_NX_REG0[0..15]


Implementing Table 4: Output Processing
---------------------------------------

At entry to stage 4, we know that register 0 contains either the
desired output port or is zero if the packet should be flooded.  We
also know that the packet's VLAN is in its 802.1Q header, even if the
VLAN was implicit because the packet came in on an access port.

The job of the final pipeline stage is to actually output packets.
The job is trivial for output to our trunk port p1:

    ovs-ofctl add-flow br0 "table=4 reg0=1 actions=1"

For output to the access ports, we just have to strip the VLAN header
before outputting the packet:

    ovs-ofctl add-flows br0 - <<'EOF'
    table=4 reg0=2 actions=strip_vlan,2
    table=4 reg0=3 actions=strip_vlan,3
    table=4 reg0=4 actions=strip_vlan,4
    EOF

The only slightly tricky part is flooding multicast and broadcast
packets and unicast packets with unlearned destinations.  For those,
we need to make sure that we only output the packets to the ports that
carry our packet's VLAN, and that we include the 802.1Q header in the
copy output to the trunk port but not in copies output to access
ports:

    ovs-ofctl add-flows br0 - <<'EOF'
    table=4 reg0=0 priority=99 dl_vlan=20 actions=1,strip_vlan,2
    table=4 reg0=0 priority=99 dl_vlan=30 actions=1,strip_vlan,3,4
    table=4 reg0=0 priority=50            actions=1
    EOF

> Our rules rely on the standard OpenFlow behavior that an output
> action will not forward a packet back out the port it came in on.
> That is, if a packet comes in on p1, and we've learned that the
> packet's destination MAC is also on p1, so that we end up with
> "actions=1" as our actions, the switch will not forward the packet
> back out its input port.  The multicast/broadcast/unknown
> destination cases above also rely on this behavior.


### Testing Table 4

### EXAMPLE 1: Broadcast, Multicast, and Unknown Destination

Try tracing a broadcast packet arriving on p1 in VLAN 30:

    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=30

The interesting part of the output is the final line, which shows that
the switch would remove the 802.1Q header and then output the packet to
p3 and p4, which are access ports for VLAN 30:

    Datapath actions: pop_vlan,3,4

Similarly, if we trace a broadcast packet arriving on p3:

    ovs-appctl ofproto/trace br0 in_port=3,dl_dst=ff:ff:ff:ff:ff:ff

then we see that it is output to p1 with an 802.1Q tag and then to p4
without one:

    Datapath actions: push_vlan(vid=30,pcp=0),1,pop_vlan,4

> Open vSwitch could simplify the datapath actions here to just
> "4,push_vlan(vid=30,pcp=0),1" but it is not smart enough to do so.

The following are also broadcasts, but the result is to drop the
packets because the VLAN only belongs to the input port:

    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=ff:ff:ff:ff:ff:ff
    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=55

Try some other broadcast cases on your own:

    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=20
    ovs-appctl ofproto/trace br0 in_port=2,dl_dst=ff:ff:ff:ff:ff:ff
    ovs-appctl ofproto/trace br0 in_port=4,dl_dst=ff:ff:ff:ff:ff:ff

You can see the same behavior with multicast packets and with unicast
packets whose destination has not been learned, e.g.:

    ovs-appctl ofproto/trace br0 in_port=4,dl_dst=01:00:00:00:00:00
    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=20
    ovs-appctl ofproto/trace br0 in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=30


### EXAMPLE 2: MAC Learning

Let's follow the same pattern as we did for table 3.  First learn a
MAC on port p1 in VLAN 30:

    ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 -generate

You can see from the last line of output that the packet's destination
is unknown, so it gets flooded to both p3 and p4, the other ports in
VLAN 30:

    Datapath actions: pop_vlan,3,4

Then reverse the MACs and learn the first flow's destination on port
p4:

    ovs-appctl ofproto/trace br0 in_port=4,dl_src=20:00:00:00:00:01,dl_dst=10:00:00:00:00:01 -generate

The last line of output shows that the this packet's destination is
known to be p1, as learned from our previous command:

    Datapath actions: push_vlan(vid=30,pcp=0),1

Now, if we rerun our first command:

    ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,dl_dst=20:00:00:00:00:01 -generate

we can see that the result is no longer a flood but to the specified
learned destination port p4:

    Datapath actions: pop_vlan,4


Contact 
=======

bugs@openvswitch.org
http://openvswitch.org/

[INSTALL.md]:../INSTALL.md


####################################################################
ovs-vsctl  -- --if-exists del-port qg-58160f46-1d  --  add-port  br118  qg-58160f46-1d  -- set Interface  qg-58160f46-1d  type=internal  --  set Interface  qg-58160f46-1d  external-ids:iface-id=58160f46-1d08-46bc-86bc-ad7511c388dc  --  set  Interface  qg-58160f46-1d  external-ids:iface-status=active  --  set Interface  qg-58160f46-1d  external-ids:attached-mac=fa:16:3e:72:1f:4d

ip netns add qrouter001
ip link set qg-58160f46-1d address fa:16:3e:72:1f:4d
ip link set qg-58160f46-1d netns qrouter001
ip netns exec qrouter001 ip link set qg-58160f46-1d up
ip netns exec qrouter001 ip addr show qg-58160f46-1d permanent scope global
ip netns exec qrouter001 ip -4 addr add 192.168.100.1/24 brd 192.168.100.255 scope global dev qg-58160f46-1d



=============
流表网络实验:
#  Port  Type   OF_PORT          Vlan
#   p1  trunk   ofport_request=1 (carrying all VLANs) 
#   p2  access  ofport_request=2 (VLAN 20) 
#   p3  access  ofport_request=3 (VLAN 30) 
#   p4  access  ofport_request=4 (VLAN 30) 

*  Table  Usage       Flows
*  0      Admission control     
*                     ovs-ofctl add-flow br0 "table=0,dl_src=01:00:00:00:00:00/01:00:00:00:00:00,actions=drop"
*                     ovs-ofctl add-flow br0 "table=0,dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0,actions=drop"
*                     ovs-ofctl add-flow br0 "table=0,priority=0,actions=resubmit(,1)"
*  1      Valn input processing 
*                ovs-ofctl add-flow br0 "table=1,priority=0,actions=drop"
*                ovs-ofctl add-flow br0 "table=1,priority=99,in_port=1,actions=resubmit(,2)"
*                ovs-ofctl add-flow br0 "table=1,priority=99,in_port=2,vlan_tci=0,actions=mod_vlan_vid:20,resubmit(,2)"
*				 ovs-ofctl add-flow br0 "table=1,priority=99,in_port=3,vlan_tci=0,actions=mod_vlan_vid:30,resubmit(,2)"
*                ovs-ofctl add-flow br0 "table=1,priority=99,in_port=4,vlan_tci=0,actions=mod_vlan_vid:40,resubmit(,2)"
*  2      Learn souce MAC&VLAN for integress port 
*                ovs-ofctl add-flow br0 "table=2 actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]
*                =NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)"     
*  3      Look up learned port for destination MAC&VLAN
*                ovs-ofctl add-flow br0 "table=3,priority=50,actions=resubmit(,10),resubmit(,4)"
*				 ovs-ofctl add-flow br0 "table=3,priority=99,dl_dst=01:00:00:00:00:00/01:00:00:00:
*                00:00,actions=resubmit(,4)"
*  4      Output processing
*                ovs-ofctl add-flow br0 "table=4 reg0=1 actions=1"
*				 ovs-ofctl add-flow br0 "table=4 reg0=2 actions=strip_vlan,2"
*                ovs-ofctl add-flow br0 "table=4 reg0=3 actions=strip_vlan,3"
*                ovs-ofctl add-flow br0 "table=4 reg0=4 actions=strip_vlan,4" 

####前期准备####
ovs-vsctl add-br br0 -- set Bridge br0 fail-mode=secure && ip link set br0 up
for i in {1..4};do ovs-vsctl add-port br0 p$i  -- set Interface  p$i type=internal -- set Interface  p$i ofport_request=$i;ovs-ofctl mod-port br0 p$i up;done
########

####测试table0####
*1*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:05
Bridge: br0
Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000
Rule: table=0 cookie=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0
OpenFlow actions=drop

Final flow: unchanged
Megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop

*2*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,dl_dst=01:80:c2:00:00:10
Bridge: br0
Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000
Rule: table=0 cookie=0 priority=0
OpenFlow actions=resubmit(,1)

	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:10/ff:ff:ff:ff:ff:f0,dl_type=0x0000
	No match

Final flow: unchanged
Megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:10/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop

####测试table1####
*1*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=5
Bridge: br0
Flow: metadata=0,in_port=1,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
Rule: table=0 cookie=0 priority=0
OpenFlow actions=resubmit(,1)

	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
	Rule: table=1 cookie=0 priority=99,in_port=1
	OpenFlow actions=resubmit(,2)

		Resubmitted flow: unchanged
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
		No match

Final flow: unchanged
Megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop

*2*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=2
Bridge: br0
Flow: metadata=0,in_port=2,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
Rule: table=0 cookie=0 priority=0
OpenFlow actions=resubmit(,1)

	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=2,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
	Rule: table=1 cookie=0 priority=99,in_port=2
	OpenFlow actions=mod_vlan_vid:20,resubmit(,2)

		Resubmitted flow: metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=2,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
		No match

Final flow: metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
Megaflow: recirc_id=0,skb_priority=0,in_port=2,vlan_tci=0x0000/0x1fff,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop


*3*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=2,vlan_tci=5
Bridge: br0
Flow: metadata=0,in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00,dl_dst=00:00:00:00:00:00,dl_type=0x0000
Rule: table=0 cookie=0 priority=0
OpenFlow actions=resubmit(,1)

	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
	Rule: table=1 cookie=0 priority=0
	OpenFlow actions=drop

Final flow: unchanged
Megaflow: recirc_id=0,skb_priority=0,in_port=2,vlan_tci=0x0005,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop



####测试table2####
*1*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate
Bridge: br0
Flow: metadata=0,in_port=1,vlan_tci=0x0014,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00,dl_type=0x0000
Rule: table=0 cookie=0 priority=0
OpenFlow actions=resubmit(,1)

	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
	Rule: table=1 cookie=0 priority=99,in_port=1
	OpenFlow actions=resubmit(,2)

		Resubmitted flow: unchanged
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
		Rule: table=2 cookie=0 
		OpenFlow actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)

			Resubmitted flow: unchanged
			Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
			Resubmitted  odp: drop
			Resubmitted megaflow: recirc_id=0,skb_priority=0,in_port=1,vlan_tci=0x0014/0x0fff,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
			No match

Final flow: unchanged
Megaflow: recirc_id=0,skb_priority=0,in_port=1,vlan_tci=0x0014/0x0fff,dl_src=50:00:00:00:00:01,dl_dst=00:00:00:00:00:00/ff:ff:ff:ff:ff:f0,dl_type=0x0000
Datapath actions: drop
[root@client ~]# ovs-ofctl dump-flows br0 "table=10"
NXST_FLOW reply (xid=0x4):
 cookie=0x0, duration=20.241s, table=10, n_packets=0, n_bytes=0, idle_age=20, vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x1->NXM_NX_REG0[0..15]


####测试table3####
*1*
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 -generate
[root@client ~]# ovs-ofctl dump-flows br0 table=10  # 可看到新加的流表规则
[root@client ~]# ovs-appctl ofproto/trace br0 in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,dl_dst=90:00:00:00:00:01 -generate   # 测试自动添加的流表规则





























ovs-ofctl add-flow br0 "table=2 actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)"

















