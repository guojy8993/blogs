### 需求描述 ###
假如我们需要构造一个具有 mac自学习以及vlan特性的4端口交换机,端口特性描述如下:
*p1 一个trunk端口,带有所有的vlan,使用 openflow 端口号 1.
*p2 一个access端口,带有vlan20,使用 openflow 端口号 2.
*p3,p4  全部都是vlan30的 access端口,相应地占用openflow端口3,4.
# 端口的名字不重要.
# 一个OpenFlow交换机总是拥有一个 LOCAL 端口的,在该场景下并不会使用该端口.

### 流表规划 ###
我们的交换机设计包含5个主要的流表,每个流表在整个交换机管道中完成数据处理的一个阶段.
Table 0: Admission control(准入控制).
Table 1: VLAN input processing(VLAN 输入控制).
Table 2: Learn source MAC and VLAN for ingress port(交换机入端口学习mac/vlan).
Table 3: Look up learned port for destination MAC and VLAN(根据学习结果为包含指定dest mac与vlan的帧查找对应输出端口).
Table 4: Output processing(输出处理).

### 流表设计与测试 ###
该部分将展示各个流表的详设计:
(1)准备工作:
   a.创建ovs交换机:
   [root@my-pc ~]# ovs-vsctl -- --if-exists del-br ovs-guide \
                             -- add-br ovs-guide  \
                             -- set Bridge ovs-guide fail-mode=secure
   # 在secure模式下,创建出的流表不包含默认流规则
   b.添加4个端口,设置对应openflow端口号:
   [root@my-pc ~]# for i in {1..4};do ovs-vsctl -- --if-exists del-port p$i \
                                                -- add-port ovs-guide p$i \
                                                -- set Interface p$i type=internal \
                                                -- set Interface p$i ofport_request=$i;\
                                      ovs-ofctl mod-port ovs-guide p$i up;\
                                   done
   # 官方文档 使用 ovs-ofctl mod-port <Bridge> <Port> up,启动port对应的Interface, 但是系统一直
   # 提示找不到对应的,e.g,p1设备,故而此处不予进行此操作.
   # 但是有必要指出 ovs-ofctl mod-port <Bridge> <Port> up 作用类似于 ifconfig <Interface> up 的效果,
   # 但是 ovs interface 对ifconfig是不可见的,不能使用 ifconfig显式启动设备.
   [root@my-pc ~]# ovs-vsctl show
    960b5b7a-d0bd-4ecb-8545-6710c3083e98
    Bridge ovs-guide
        fail_mode: secure
        Port "p4"
            Interface "p4"
        Port "p3"
            Interface "p3"
        Port "p2"
            Interface "p2"
        Port "p1"
            Interface "p1"
        Port ovs-guide
            Interface ovs-guide
                type: internal
    ovs_version: "2.1.3"
 
(2)Table 0设计与测试:
   该表是packet进入交换机的入口.我们使用该表来过滤并丢弃符合这样或那样条件的packets.
   
   例如,包含多播源地址的packet不合法, 我们就在交换机入端口添加一条流表以匹配并丢弃多播包.
   [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=0, dl_src=01:00:00:00:00:00/01:00:00:00:00:00, actions=drop"
   # NOTE:
   # 01:00:00:00:00:00/01:00:00:00:00:00    匹配多播(含广播) Ethernet帧
   # 00:00:00:00:00:00/01:00:00:00:00:00    匹配单播 Ethernet帧
   # man ovs-ofctl 了解更多
   
   又例如,交换机不应该转发 IEEE802.1D 生成树协议(STP)包,我们可以添加流表规则匹配并丢弃之
   [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=0, dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0, actions=drop"
   # 参考 "常见协议与mac地址":http://anonsvn.wireshark.org/wireshark/trunk-1.4/wka.tmpl
   # 说明:在该表中可以添加更多的过滤规则以丢弃不允许进入的数据包,而这正是该表扮演的角色.
   
   最后,一条默认流表规则(较低的优先级)是必须的,用以将经过"准入管理"清洗后的流量导入pipeline的下一个表.
   [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=0, priority=0, actions=resubmit(,1)"
   
   使用专业工具(ofproto/trace)测试table 0效果:
   *使用生成树协议多播包测试
   [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=01:80:c2:00:00:05
   Bridge: ovs-guide
   Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:05,dl_type=0x0000 # 输入流
   Rule: table=0 cookie=0 dl_dst=01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0    # 匹配到的流规则
   OpenFlow actions=drop    # 采取drop处理
   Final flow: unchanged
   Relevant fields: skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:00
                    /ff:ff:ff:ff:ff:f0,dl_type=0x0000
   Datapath actions: drop
   
   *使用 dl_dst=01:80:c2:00:00:10(在01:80:c2:00:00:00/ff:ff:ff:ff:ff:f0范围之外)的包测试
   [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=01:80:c2:00:00:10
   Bridge: ovs-guide
   Flow: metadata=0,in_port=1,vlan_tci=0x0000,dl_src=00:00:00:00:00:00,dl_dst=01:80:c2:00:00:10,dl_type=0x0000
   Rule: table=0 cookie=0 priority=0
   OpenFlow actions=resubmit(,1)     # 没有匹配到任何一条drop流规则,使用默认流表规则处理(交给table 1处理)
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop       # 不匹配 table 1的任何流规则,drop
	No match
  Final flow: unchanged
  Relevant fields: skb_priority=0,in_port=1,dl_src=00:00:00:00:00:00/01:00:00:00:00:00,dl_dst=01:80:c2:00:00:10
                   /ff:ff:ff:ff:ff:f0,dl_type=0x0000
  Datapath actions: drop

(3)Table 1设计与测试:
  能进入table 1的包都是经过table 0基本验证的.该表的目标是根据端口的vlan配置验证包的vlan tag. 我们会为到达access端口的包
  添加 vlan header,方便稍后的依赖vlan处理的工作,消除特例.
  添加一条默认规则,drop所有匹配不到规则的流
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=0, actions=drop"
  针对p1: 接受任何不包含vlan header或任意vlan的包,可以添加一条规则:从p1进入的包一律交给table2处理
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=99, in_port=1, actions=resubmit(,2)"
  针对access端口的p2,p3,p4: 接受包,并依据端口vlan配置打上对应 vlan tag
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=1, priority=99, in_port=2, vlan_tci=0, \
                                                actions=mod_vlan_vid:20, resubmit(,2)"
  [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=1, priority=99, in_port=3, vlan_tci=0, \
                                                actions=mod_vlan_vid:30, resubmit(,2)"
  [root@my-pc ~]# ovs-ofctl add-flow  ovs-guide "table=1, priority=99, in_port=4, vlan_tci=0, \
                                                actions=mod_vlan_vid:30, resubmit(,2)"                                              
  # 我们并未匹配并处理任何从access端口进入的802.1q(vlan协议)包,故而使用默认规则处理(Drop)
  # 而事实上这正是access端口处理这类包的正确方式
  
  使用专业工具(ofproto/trace)测试table 1效果:
  *使用valn_tci=5的包测试trunk端口p1:
  ...
  Resubmitted flow: unchanged
  Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
  Resubmitted  odp: drop
  Rule: table=1 cookie=0 priority=99,in_port=1
  OpenFlow actions=resubmit(,2)         # 从p1端口进入的流量直接交给table2处理
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	No match
  ...
  
  *测试access端口p2(数据包不带vlan header):
  ...
  Resubmitted flow: unchanged
  Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
  Resubmitted  odp: drop
  Rule: table=1 cookie=0 priority=99,in_port=2,vlan_tci=0x0000
  OpenFlow actions=mod_vlan_vid:20,resubmit(,2)    # 从p1端口进入的流量先加vlan header,再交给table2处理
	Resubmitted flow: metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=00:00:00:00:00:00,\
	                                                             dl_dst=00:00:00:00:00:00,dl_type=0x0000
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	No match
  ...
  
  *测试access端口(使用不合法数据,带vlan header)
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide  in_port=2,vlan_tci=5
  ...
  Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=1 cookie=0 priority=0
	OpenFlow actions=drop              # 使用默认规则处理
  ...
  
(4)Table 2设计与测试:
  该表允许交换机学习包的源MAC,交换机端口(配置有vlan). 该表是个很好的例子来说明为什么交换机需要给进入access端口
  的包添加 vlan tag. 我们想要将交换机端口与(MAC+VLAN)关联起来,而不必关心vlan是数据包的原始部分抑或是access端口
  关联的vlan值.使用一条流表规则搞定:
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11],   \
                                                                        NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \
                                                                        load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]), \
                                                                        resubmit(,3)"
  # NOTE:
  # learn(table=N...) :经学习产生的流表规则(假设为A)将加入tableN(MAC学习表)中
  # NXM_OF_VLAN_TCI[0..11] :给规则A添加匹配条件 "vlan_tci=<当前packet的vlan_tci>"
  # NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[] :给规则A添加匹配条件 "dl_dst=<当前packet的dl_src>"
  # load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15] :给流表规则A添加action部分,进行的动作是把当前packet的入端口放入寄存器0
  # 特别注意:
  # `Learn`action为mac学习指定额外的两个元素:
  # (1)hard_timeout 指定新加流表在合理时间间隔内无流量通过就会导致该流规则最终过期
  # (2)max_flows_count 为节约ovs资源起见,每个流表都会有流规则数量上限
  
  使用专业工具(ofproto/trace)测试table 2效果:
  *使用valn_tci为20,源mac为50:00:00:00:00:01的包测试trunk端口p1:
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,vlan_tci=20,dl_src=50:00:00:00:00:01 -generate
  ...
  Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=1 cookie=0 priority=99,in_port=1
	OpenFlow actions=resubmit(,2)
		Resubmitted flow: unchanged
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		Rule: table=2 cookie=0 
		OpenFlow actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],\
		                                           load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)
		        # 导致 table10 学习新规则
			Resubmitted flow: unchanged
			Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
			Resubmitted  odp: drop
			No match
  ...
  # "-generate" 是个新的关键字. 一般来讲,"ofproto/trace" 是没有副作用的:意味着,"output"并不真正将包output,而"learn"
  # 也并不会真的修改学习表,等等. 如果加上 "-genarate"选项,就会完全不一样,"ofproto/trace"就会真的执行对应的action.
  # 这是很重要的一点,现在我们需要看到测试的"副作用",故而需要"-generate"参数.
  [root@my-pc ~]# ovs-ofctl dump-flows ovs-guide "table=10"
  NXST_FLOW reply (xid=0x4):
  cookie=0x0, duration=496.614s, table=10, n_packets=0, n_bytes=0, idle_age=496, vlan_tci=0x0014/0x0fff,\
                  dl_dst=50:00:00:00:00:01 actions=load:0x1->NXM_NX_REG0[0..15]
  # 可以看到table10确实学习到新的规则了:新规则对vlan_tci=20,dl_dst=50:00:00:00:00:01的处理是记录port号到reg0
  
  * 使用无vlan header的,dl_src=50:00:00:00:00:01的数据包测试p2
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=2,dl_src=50:00:00:00:00:01 -generate
   Bridge: ovs-guide
   ...
   Resubmitted flow: unchanged
   Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
   Resubmitted  odp: drop
   Rule: table=1 cookie=0 priority=99,in_port=2,vlan_tci=0x0000
   OpenFlow actions=mod_vlan_vid:20,resubmit(,2)
	Resubmitted flow: metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=50:00:00:00:00:01,\
	                                                dl_dst=00:00:00:00:00:00,dl_type=0x0000
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=2 cookie=0 
	OpenFlow actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],\
	                                                 load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)

		Resubmitted flow: unchanged
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		No match
   ...
   [root@my-pc ~]# ovs-ofctl dump-flows ovs-guide "table=10"
   NXST_FLOW reply (xid=0x4):
   cookie=0x0, duration=1126.737s, table=10, n_packets=0, n_bytes=0, idle_age=1126, hard_age=126, \
                               vlan_tci=0x0014/0x0fff,dl_dst=50:00:00:00:00:01 actions=load:0x2->NXM_NX_REG0[0..15]
   # 经过p2的packet，mac地址端口被学习,而之前学习到的p1端口规则已经自然老化,被删除;
   
   
   
(5)Table 3设计与测试:
  该表主要负责弄清楚根据目标mac以及vlan,数据包该发往何端口.也就是说,如我门学习到目的位置(在table2中处理先前的packet,其
  的源地址即为当前包目标地址),然后我们就将当前数据包发往学习到的port. 该表只需要一条流表用以查询:
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=3 priority=50 actions=resubmit(,10), resubmit(,4)"
  # Note:
  # resubmit(,10) ，table10负责将学习packet的入port到reg0;如果该包的目标地址没有被学习到,则不会匹配任何流规则,则该resubmit
  # 在table10中不会触发任何操作,而reg0中初始化值0也不会改动.reg0的值为0，这在pipeline的下一阶段是一个信号:该包需要被flooded.
  # 我们可以添加流表以允许多播包跳过表查询,因为该类型的包总是应该被flooded的.
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=3 priority=99 dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 \
                                                                                                      actions=resubmit(,4)"
  # 严格来说,我们并不需要该流规则,因为多播地址包在table0已经被清洗掉了.
  使用专业工具(ofproto/trace)测试table 3效果:
  *使用下述命令引发table10学习 mac f0:00:00:00:00:01与vlan 20以及port p1的对应关系
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_vlan=20,dl_src=f0:00:00:00:00:01,\
                                                                                 dl_dst=90:00:00:00:00:01 -generate
  Bridge: ovs-guide
  ...
  Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=2 cookie=0 
	OpenFlow actions=learn(table=10,NXM_OF_VLAN_TCI[0..11],NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[],\
	                                                   load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]),resubmit(,3)

		Resubmitted flow: unchanged
		Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
		Resubmitted  odp: drop
		Rule: table=3 cookie=0 priority=50
		OpenFlow actions=resubmit(,10),resubmit(,4)

			Resubmitted flow: unchanged
			Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
			Resubmitted  odp: drop
			No match

			Resubmitted flow: unchanged
			Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
			Resubmitted  odp: drop
			No match
  ...
  [root@my-pc ~]# ovs-ofctl dump-flows ovs-guide "table=10" | grep "f0:00:00:00:00:01"
  cookie=0x0, duration=170.770s, table=10, n_packets=0, n_bytes=0, idle_age=170, vlan_tci=0x0014/0x0fff,\
                                                             dl_dst=f0:00:00:00:00:01 actions=load:0x1->NXM_NX_REG0[0..15]
  * 发送packet测试该新加流规则.例如,我们可以从p2口发送一个dest mac 为f0:00:00:00:00:01(已经被学习)的packet.
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=2,dl_src=90:00:00:00:00:01,\
                                                                                   dl_dst=f0:00:00:00:00:01 -generate
  Bridge: ovs-guide
  ...
  Resubmitted flow: unchanged
     Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
     Resubmitted  odp: drop
     Rule: table=3 cookie=0 priority=50
     OpenFlow actions=resubmit(,10),resubmit(,4)
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=10 cookie=0 vlan_tci=0x0014/0x0fff,dl_dst=f0:00:00:00:00:01
	OpenFlow actions=load:0x1->NXM_NX_REG0[0..15]

	Resubmitted flow: reg0=0x1,metadata=0,in_port=2,dl_vlan=20,dl_vlan_pcp=0,dl_src=90:00:00:00:00:01,\
	                                                                      dl_dst=f0:00:00:00:00:01,dl_type=0x0000
	Resubmitted regs: reg0=0x1 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	No match
  ...
  # NOTE:
  # 上述内容是很有意思的一部分摘抄(excerpt),该部分输出显示出了对"resubmit(,10)"的追踪结果,显示出本次发送的数据包匹配到
  # table0之前学习到的mac,因此执行对应的load操作,把数据包的入端口值加载入reg0中;
  
(6)Table 4设计与测试:
  在该阶段,我们知道reg0的值包含的要么是数据包的入端口值,要么是0(原因参见前文). 同时我们也知道packet是包含802.1Q header的,
  因为即使含蓄地未指明,但是packet是从access端口进入的,也会被添加vlan header.
  pipeline最后一阶段的工作是输出packets:
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=1 actions=1"
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=2 actions=strip_vlan,2"
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=3 actions=strip_vlan,3"
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=4 actions=strip_vlan,4"
  # 对于输出到access端口的packet,输出前需要去vlan
  唯一稍微狡猾的地方是使用未学习的目的地址去洪泛多播与广播包,单播包
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=0 priority=99 dl_vlan=20 actions=1,strip_vlan,2"
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=0 priority=99 dl_vlan=30 actions=1,strip_vlan,3,4"
  [root@my-pc ~]# ovs-ofctl add-flow ovs-guide "table=4 reg0=0 priority=50 actions=1"
  # NOTE:
  # 我们的规则依赖于标准OpenFlow交换机的行为,"output"操作并不会将数据包从其进入端口处转发.
  # 举例说明,如果一个数据包从p1端口进入,且我们已经学习到该包的mac地址也在p1端口,那么该包的最终处理是发送到p1,
  # 而此情景下,交换机是不转发数据包到其输入端口的.
  # 而多播,广播,未知地址的包全部依赖于该行为处理.

  使用专业工具(ofproto/trace)测试table 4效果:
  *广播,多播以及未知地址
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=30
  Bridge: ovs-guide
  ...
  OpenFlow actions=resubmit(,4)
	Resubmitted flow: unchanged
	Resubmitted regs: reg0=0x0 reg1=0x0 reg2=0x0 reg3=0x0 reg4=0x0 reg5=0x0 reg6=0x0 reg7=0x0
	Resubmitted  odp: drop
	Rule: table=4 cookie=0 priority=99,reg0=0,dl_vlan=30
	OpenFlow actions=output:1,strip_vlan,output:3,output:4  # 重点注意
	skipping output to input port
	Nonexistent output port
	Nonexistent output port
  ...
  # 该部分输出展示对于未知地址,vlan_tci 30的数据包,那么去vlan，并发送到p3,p4端口
  如下是广播包,但是结果是drop,因为VLAN只属于入端口
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=ff:ff:ff:ff:ff:ff
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=55
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=ff:ff:ff:ff:ff:ff,dl_vlan=20
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=2,dl_dst=ff:ff:ff:ff:ff:ff
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=4,dl_dst=ff:ff:ff:ff:ff:ff
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=4,dl_dst=01:00:00:00:00:00
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=20
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_dst=90:12:34:56:78:90,dl_vlan=30

  *测试MAC学习
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=4,dl_src=20:00:00:00:00:01,\
                                                                              dl_dst=10:00:00:00:00:01 -generate
  [root@my-pc ~]# ovs-appctl ofproto/trace ovs-guide in_port=1,dl_vlan=30,dl_src=10:00:00:00:00:01,\
                                                                              dl_dst=20:00:00:00:00:01 -generate
