本篇目标:实现租户网络的dhcp,客户机dhcp方式自动获取ip
# 创建 dnsmasq 服务监听端口设备
[root@network ~]# ovs-vsctl -- --if-exists del-port qdhcp \
                               -- add-port br-int qdhcp       \
                               -- set Interface qdhcp type=internal \  
                               -- set Interface qdhcp external-ids:iface-id=733431fe-567a-44ab-a29e-5fb94aa36a4d \ 
                               -- set Interface qdhcp  external-ids:iface-status=active  \
                               -- set Interface qdhcp external-ids:attached-mac=fa:16:00:4c:56:89

# 创建qdhcp命名空间(e.g:Q),并将dhcp设备放入Q中
[root@network ~]# ip netns add Q
[root@network ~]# ip link set qdhcp netns Q

# 启动Q网络空间下的lo,qdhcp设备,设置state,qlen参数
[root@network ~]# ip netns exec Q ip link set qdhcp up
[root@network ~]# ip netns exec Q ip link set qdhcp state up
[root@network ~]# ip netns exec Q ip link set qdhcp qlen 1000
[root@network ~]# ip netns exec Q ip link set lo up
[root@network ~]# ip netns exec Q ip link set lo state up

# 为dhcp设备配置ip
# 注意 dnsmasq 对监听设备有无ip地址不关心
[root@network ~]# ip netns exec Q ip addr add 172.172.172.2/24 dev qdhcp

# 创建 dnsmasq进程stat目录
[root@network ~]# mkdir -p /var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/

# 在Q网络空间下启动dnsmasq进程,提供服务
[root@network ~]# ip netns exec Q dnsmasq --no-hosts \
                                          --no-resolv   \
                                          --strict-order  \
                                          --bind-interfaces  \
                                          --interface=qdhcp \
                                          --except-interface=lo    \
                                          --pid-file=/var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/pid   \ 
                                          --dhcp-hostsfile=/var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/host  \
                                          --addn-hosts=/var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/addn_hosts   \
                                          --dhcp-optsfile=/var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/opts  \
                                          --dhcp-leasefile=/var/lib/neutron/dhcp/50dbf44b-c44f-404d-ac93-c06b1a75ec2e/leases  \
                                          --dhcp-range=set:tag1,172.172.172.3,172.172.172.3,86400s --domain=qq

# 注意: 此处dhcp-range选项耍了个小把戏,保证示例虚拟机只能分配到 172.172.172.3;
# 正儿八经地使用方式是 --dhcp-range=set:tag{N},{IP_POOL_START},{IP_POOL_END},{LEASE_MAX}{TIME_UNIT}
# 又注意: (经测试知道)qdhcp设备如果配置ip,那么应该与dhcp-range保持一致;


# 虚拟机中重启网卡
[root@my-pc ~]# ifdown eth0
[root@my-pc ~]# ifup eth0
Determining IP Information for eth0... done.
# 此时虚拟机分配到内网ip: 172.172.172.3
# 而虚拟路由已经为 172.172.172.3 绑定了外网 ip:10.160.0.147
# 此时通过我的办公电脑ip: 10.100.0.192 访问10.160.0.147

# 在办公网络通过xshell访问租户私有网络中的虚拟机 my-pc
[c:\~]$ ssh root@10.160.0.147
Connecting to 10.160.0.147:22...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

Last failed login: Fri Jul 29 16:10:27 CST 2016 from 10.100.0.192 on ssh:notty
There was 1 failed login attempt since the last successful login.
Last login: Fri Jul 15 14:11:45 2016 from 10.100.0.192
[root@my-pc ~]# ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 52:54:00:00:db:fb brd ff:ff:ff:ff:ff:ff
    inet 172.172.172.3/24 brd 172.172.172.255 scope global dynamic eth0
       valid_lft 86287sec preferred_lft 86287sec
    inet6 fe80::5054:ff:fe00:dbfb/64 scope link 
       valid_lft forever preferred_lft forever



