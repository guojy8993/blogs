
Step1: 在第一二两个窗口启动subscriber程序
[root@agent144 ps]# python  subscriber.py  > logs_from_rabbit.log   # 输出到日志
[root@agent144 ps]# python subscriber.py     # 输出到控制台
[*] Waiting for messages ...

Step2: 在第三个窗口启动publisher程序
[root@agent144 ps]# python publisher.py 
[*] Message info: Hello rabbitMQ ! sent.
观察第一窗口的日志以及第二窗口的控制台输出:
[root@agent144 ps]# cat logs_from_rabbit.log
[*] Waiting for messages ...
[*] 'info: Hello rabbitMQ !'
[root@agent144 ps]# python subscriber.py
[*] Waiting for messages ...
[*] 'info: Hello rabbitMQ !'

附:
发布者程序(publisher.py)
#!/usr/bin/env python

import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost'))
channel = connection.channel()
channel.exchange_declare(
    exchange='logs',
    type='fanout'
)

message = ' '.join(sys.argv[1:]) or "info: Hello rabbitMQ !"
channel.basic_publish(
    exchange='logs',
    routing_key='',
    body=message
)
print "[*] Message %s sent." % message
connection.close()


订阅者程序(subscriber.py)
#!/usr/bin/env python

import pika
import sys

connection = pika.BlockingConnection(
    pika.ConnectionParameters(host='localhost')
)
channel = connection.channel()
channel.exchange_declare(
    exchange='logs',
    type='fanout'
)
result = channel.queue_declare(exclusive=True)
queue = result.method.queue
channel.queue_bind(
    exchange='logs',
    queue=queue
)
print "[*] Waiting for messages ..."


def callback(channel, method, properties, body):
    print "[*] %r" % body

channel.basic_consume(
    callback,
    queue=queue,
    no_ack=True
)
channel.start_consuming()

参考官方:http://www.rabbitmq.com/tutorials/tutorial-three-python.html
