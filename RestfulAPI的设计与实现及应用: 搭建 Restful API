# 前期准备工作 
# 安装python-patse,python-paste-deploy,python-webob 具体作用参考库说明
# [root@dev restapi]# yum search paste | grep python
# python-paste.noarch : Tools for using a Web Server Gateway Interface stack
# python-paste-deploy.noarch : Load, configure, and compose WSGI applications and
# python-paste-script.noarch : A pluggable command-line frontend
# [root@dev restapi]# yum install -y python-paste.noarch python-paste-deploy.noarch
# [root@dev restapi]# yum search webob | grep python
# python-backlash.noarch : Standalone WebOb port of the Werkzeug Debugger
# python-webob.noarch : WSGI request and response object
# python-webob1.4.noarch : WSGI request and response object
# [root@dev restapi]# yum install -y python-webob.noarch

## 1.简单的WSGI服务 ##
(1) 编写简单wsgi服务器脚本
#! /usr/bin/env python
from paste import httpserver
# Here are two blank lines
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/html')])
    return ['Hello WSGI!\n']
httpserver.serve(application, host='127.0.0.1', port=8080)
# PEP8规范:
# (1) 函数定义前空出两行;
# (2) 函数参数列表使用 ", "分割;
(2) 测试调用wsgi服务
[root@dev 12.2.1]# python simplewsgi.py
serving on http://127.0.0.1:8080
[root@dev restapi]# curl 127.0.0.1:8080
Hello WSGI!





## 2.PasteDeploy定制WSGI服务 ##
# 通过配置文件配置WSGI服务,大大增强WSGI服务的伸缩性
(1) 定义PasteDeploy配置文件(api-paste.ini)
[app:main]
paste.app_factory = wsgi_paste:app_factory
# 配置文件语法说明:
# app是PasteDeploy组件,WSGI服务的核心业务,负责服务实现的主要逻辑;
# main表示程序入口
# 其他的组件有:
# filter(过滤器):负责准备工作,例如执行主要业务前的用户身份认证,服务器环境准备;
#                当前filter执行完之后可返回,也可交给后续的 filter或app处理
# pipeline(管道): 由若干 filter与1个app组成.通过pipeline定制复杂的WSGI
# composite(复合体):用于创建复杂的应用,可以进行分支选择;例如根据API的version,
#                 决定程序调用 v1或v2或v..实现
(2) 定义 wsgi_paste 文件:app工厂,服务启动
#! /usr/bin/env python
from webob import Response
from webob.dec import wsgify
from paste import httpserver
from paste.deploy import loadapp
import os
import sys

ini_path = sys.argv[1]
if not os.path.exists(ini_path) or not os.path.isfile(ini_path):
    print "Invalid Configuration File: %s" % ini_path
    sys.exit()
# Here are two blank lines
@wsgify
def application(request):
    return Response('Hello Paste Deploy WSGI!\n')
# Here are two blank lines
def app_factory(global_config, **local_config):
    return application
wsgi_app = loadapp('config:%s' % ini_path)
httpserver.serve(wsgi_app, host='127.0.0.1', port=8080)

(3) 测试调用wsgi服务
[root@dev 11.2.2]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.2/api-paste.ini
serving on http://127.0.0.1:8080
[root@dev 11.2.2]# curl 127.0.0.1:8080
Hello Paste Deploy WSGI!

## 3.PasteDeploy定制WSGI服务进阶:带过滤器的WSGI服务 ##
(1) 定义PasteDeploy配置文件(api-paste.ini)
[root@dev 11.2.3]# cat api-paste.ini 
[pipeline:main]
pipeline = auth hello
[filter:auth]
paste.filter_factory = wsgi_middleware:filter_factory
[app:hello]
paste.app_factory = wsgi_paste:app_factory
# 注意 filter 组件使用:paste.FILTER_factory
# 注意 app 组件使用:paste.APP_factory
(2) 定义 auth 脚本
[root@dev 11.2.3]# cat wsgi_middleware.py
#! /usr/bin/env python
from webob.dec import wsgify
from webob import exc
# Here are two blank lines
@wsgify.middleware
def auth_filter(request,app):
    print "Display wsgi request body:\n"
    headers = request.headers
    for key in headers:
        print "Key:%s,Value:%s" % (key,headers[key])
    if request.headers.get('X-Auth-Token') != 'open-sesame':
        return exc.HTTPForbidden()
    return app(request)
# Here are two blank lines
def filter_factory(global_config,**local_config):
    print "global_config:%s\n" % global_config
    print "local_config:%s\n" % local_config
    return auth_filter

(3) 定义 app 脚本
[root@dev 11.2.3]# cat wsgi_paste.py
#! /usr/bin/env python
from webob import Response
from webob.dec import wsgify
from paste import httpserver
from paste.deploy import loadapp
import os
import sys
# Here is a blank line
ini_path = sys.argv[1]
if not os.path.exists(ini_path) or not os.path.isfile(ini_path):
    print "Invalid Configuration File: %s" % ini_path
    sys.exit()
# Here are two blank lines
@wsgify
def app(request):
    return Response('Hello Paste Deploy WSGI!\n')
# Here are two blank lines
def app_factory(global_config, **local_config):
    print "global_config:%s\n" % global_config
    print "local_config:%s\n" % local_config
    return app
wsgi_app = loadapp('config:%s' % ini_path)
httpserver.serve(wsgi_app, host='127.0.0.1', port=8080)

(4) 测试 WSGI 服务
[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
global_config:{'__file__': '/home/rabbitmq/restapi/11.2.3/api-paste.ini', 'here': '/home/rabbitmq/restapi/11.2.3'}
local_config:{}
global_config:{'__file__': '/home/rabbitmq/restapi/11.2.3/api-paste.ini', 'here': '/home/rabbitmq/restapi/11.2.3'}
local_config:{}
serving on http://127.0.0.1:8080

[root@dev 11.2.3]# curl -H 'X-Auth-Token:open-sesame' -H 'PP:2008' 127.0.0.1:8080
Hello Paste Deploy WSGI!

[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
...
Display wsgi request body:
Key:Pp,Value:2008
Key:Content-Length,Value:0
Key:X-Auth-Token,Value:open-sesame
Key:User-Agent,Value:curl/7.29.0
Key:Host,Value:127.0.0.1:8080
Key:Accept,Value:*/*
Key:Content-Type,Value:

[root@dev 11.2.3]# curl 127.0.0.1:8080
403 Forbidden
Access was denied to this resource.
[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
...
Display wsgi request body:
...
Key:Content-Length,Value:0
Key:User-Agent,Value:curl/7.29.0
Key:Host,Value:127.0.0.1:8080
Key:Accept,Value:*/*
Key:Content-Type,Value:




## 4.使用类实现过滤器与应用 ##
# 文件与功能说明:
#  类名           所在文件           作用
#  Auth           middleware.py      实现身份信息过滤
#  Hello          app.py             实现核心业务
#  WSGIService    service.py         用于WSGI服务的管理,包括服务的创建/停止/启动
#  Loader         wsgi.py            加载服务的应用
#  Server         wsgi.py            实现WSGI服务,创建/配置/管理线程
附文件:
(1) middleware.py
[root@agent144 clazzWsgi]# cat middleware.py
#! /usr/bin/env python
from webob.dec import wsgify
from webob import exc
import webob

class Auth(object):
    def __init__(self, app):
        self.app = app

    @classmethod
    def factory(cls, global_config, **local_config):
        def _factory(app):
            return cls(app)
        return _factory

    @wsgify(RequestClass=webob.Request)
    def __call__(self, request):
        resp = self.process_request(request)
        if resp:
            return resp
        return request.get_response(self.app)

    def process_request(self, request):
        if request.headers.get('X-AUTH-Token') != 'open-sesame':
            return exc.HTTPForbidden()

(2) app.py
[root@agent144 clazzWsgi]# cat app.py
#! /usr/bin/env python
from webob.dec import wsgify
from webob import Request
from webob import Response


class Hello(object):
    @wsgify(RequestClass=Request)
    def __call__(self, request):
        return Response('Hello, Secret world of webob !')


def app_factory(global_config, **local_config):
    return Hello()

(3) service.py
[root@agent144 clazzWsgi]# cat service.py 
#! /usr/bin/env python
import wsgi


class WSGIService(object):
    def __init__(self):
        self.loader = wsgi.Loader()
        self.app = self.loader.load_app()
        self.server = wsgi.Server(self.app, '0.0.0.0', 9996)

    def start(self):
        self.server.start()

    def stop(self):
        self.server.stop()

    def wait(self):
        self.server.wait()

if __name__ == "__main__":
    server = WSGIService()
    server.start()
    server.wait()

(4) wsgi.py
[root@agent144 clazzWsgi]# cat wsgi.py
#! /usr/bin/env pythoni
import os
import sys
from greenlet import GreenletExit
import eventlet
from eventlet import wsgi
from paste import deploy


class Loader(object):
    def load_app(self):
        ini_path = sys.argv[1]
        if not os.path.exists(ini_path):
            print ("api-paste.ini not found !")
            sys.exit(1)
        return deploy.loadapp('config:' + ini_path)


class Server(object):
    def __init__(self, app, host='0.0.0.0', port=9996):
        self.pool = eventlet.GreenPool(10)
        self.app = app
        self._socket = eventlet.listen((host, port), backlog=10)
        (self.host, self.port) = self._socket.getsockname()
        print ("listening on %(host)s:%(port)s" % self.__dict__)

    def start(self):
        self._server = eventlet.spawn(
            wsgi.server,
            self._socket,
            self.app,
            protocol=eventlet.wsgi.HttpProtocol,
            custom_pool=self.pool)

    def stop(self):
        if self._server is not None:
            self._pool.resize(0)
            self._server.kill()

    def wait(self):
        try:
            self._server.wait()
        except GreenletExit:
            print ("WSGI server has stopped.")
# 启动应用: 
# [root@agent144 clazzWsgi]# python service.py /home/guojingyu/rabbitmq/rest/clazzWsgi/api-paste.ini
# listening on 0.0.0.0:9996
# (1811) wsgi starting up on http://0.0.0.0:9996
# 调用测试:
# [root@agent144 ~]# curl -H "X-AUTH-Token:open-sesame" 127.0.0.1:9996
# Hello, Secret world of webob !



