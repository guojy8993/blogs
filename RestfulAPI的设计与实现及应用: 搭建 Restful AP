# 前期准备工作 
# 安装python-patse,python-paste-deploy,python-webob 具体作用参考库说明
# [root@dev restapi]# yum search paste | grep python
# python-paste.noarch : Tools for using a Web Server Gateway Interface stack
# python-paste-deploy.noarch : Load, configure, and compose WSGI applications and
# python-paste-script.noarch : A pluggable command-line frontend
# [root@dev restapi]# yum install -y python-paste.noarch python-paste-deploy.noarch
# [root@dev restapi]# yum search webob | grep python
# python-backlash.noarch : Standalone WebOb port of the Werkzeug Debugger
# python-webob.noarch : WSGI request and response object
# python-webob1.4.noarch : WSGI request and response object
# [root@dev restapi]# yum install -y python-webob.noarch

## 1.简单的WSGI服务 ##
(1) 编写简单wsgi服务器脚本
#! /usr/bin/env python
from paste import httpserver
# Here are two blank lines
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/html')])
    return ['Hello WSGI!\n']
httpserver.serve(application, host='127.0.0.1', port=8080)
# PEP8规范:
# (1) 函数定义前空出两行;
# (2) 函数参数列表使用 ", "分割;
(2) 测试调用wsgi服务
[root@dev 12.2.1]# python simplewsgi.py
serving on http://127.0.0.1:8080
[root@dev restapi]# curl 127.0.0.1:8080
Hello WSGI!

## 2.PasteDeploy定制WSGI服务 ##
# 通过配置文件配置WSGI服务,大大增强WSGI服务的伸缩性
(1) 定义PasteDeploy配置文件(api-paste.ini)
[app:main]
paste.app_factory = wsgi_paste:app_factory
# 配置文件语法说明:
# app是PasteDeploy组件,WSGI服务的核心业务,负责服务实现的主要逻辑;
# main表示程序入口
# 其他的组件有:
# filter(过滤器):负责准备工作,例如执行主要业务前的用户身份认证,服务器环境准备;
#                当前filter执行完之后可返回,也可交给后续的 filter或app处理
# pipeline(管道): 由若干 filter与1个app组成.通过pipeline定制复杂的WSGI
# composite(复合体):用于创建复杂的应用,可以进行分支选择;例如根据API的version,
#                 决定程序调用 v1或v2或v..实现
(2) 定义 wsgi_paste 文件:app工厂,服务启动
#! /usr/bin/env python
from webob import Response
from webob.dec import wsgify
from paste import httpserver
from paste.deploy import loadapp
import os
import sys

ini_path = sys.argv[1]
if not os.path.exists(ini_path) or not os.path.isfile(ini_path):
    print "Invalid Configuration File: %s" % ini_path
    sys.exit()
# Here are two blank lines
@wsgify
def application(request):
    return Response('Hello Paste Deploy WSGI!\n')
# Here are two blank lines
def app_factory(global_config, **local_config):
    return application
wsgi_app = loadapp('config:%s' % ini_path)
httpserver.serve(wsgi_app, host='127.0.0.1', port=8080)

(3) 测试调用wsgi服务
[root@dev 11.2.2]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.2/api-paste.ini
serving on http://127.0.0.1:8080
[root@dev 11.2.2]# curl 127.0.0.1:8080
Hello Paste Deploy WSGI!

## 3.PasteDeploy定制WSGI服务进阶:带过滤器的WSGI服务 ##
(1) 定义PasteDeploy配置文件(api-paste.ini)
[root@dev 11.2.3]# cat api-paste.ini 
[pipeline:main]
pipeline = auth hello
[filter:auth]
paste.filter_factory = wsgi_middleware:filter_factory
[app:hello]
paste.app_factory = wsgi_paste:app_factory
# 注意 filter 组件使用:paste.FILTER_factory
# 注意 app 组件使用:paste.APP_factory
(2) 定义 auth 脚本
[root@dev 11.2.3]# cat wsgi_middleware.py
#! /usr/bin/env python
from webob.dec import wsgify
from webob import exc
# Here are two blank lines
@wsgify.middleware
def auth_filter(request,app):
    print "Display wsgi request body:\n"
    headers = request.headers
    for key in headers:
        print "Key:%s,Value:%s" % (key,headers[key])
    if request.headers.get('X-Auth-Token') != 'open-sesame':
        return exc.HTTPForbidden()
    return app(request)
# Here are two blank lines
def filter_factory(global_config,**local_config):
    print "global_config:%s\n" % global_config
    print "local_config:%s\n" % local_config
    return auth_filter

(3) 定义 app 脚本
[root@dev 11.2.3]# cat wsgi_paste.py
#! /usr/bin/env python
from webob import Response
from webob.dec import wsgify
from paste import httpserver
from paste.deploy import loadapp
import os
import sys
# Here is a blank line
ini_path = sys.argv[1]
if not os.path.exists(ini_path) or not os.path.isfile(ini_path):
    print "Invalid Configuration File: %s" % ini_path
    sys.exit()
# Here are two blank lines
@wsgify
def app(request):
    return Response('Hello Paste Deploy WSGI!\n')
# Here are two blank lines
def app_factory(global_config, **local_config):
    print "global_config:%s\n" % global_config
    print "local_config:%s\n" % local_config
    return app
wsgi_app = loadapp('config:%s' % ini_path)
httpserver.serve(wsgi_app, host='127.0.0.1', port=8080)

(4) 测试 WSGI 服务
[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
global_config:{'__file__': '/home/rabbitmq/restapi/11.2.3/api-paste.ini', 'here': '/home/rabbitmq/restapi/11.2.3'}
local_config:{}
global_config:{'__file__': '/home/rabbitmq/restapi/11.2.3/api-paste.ini', 'here': '/home/rabbitmq/restapi/11.2.3'}
local_config:{}
serving on http://127.0.0.1:8080

[root@dev 11.2.3]# curl -H 'X-Auth-Token:open-sesame' -H 'PP:2008' 127.0.0.1:8080
Hello Paste Deploy WSGI!

[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
...
Display wsgi request body:
Key:Pp,Value:2008
Key:Content-Length,Value:0
Key:X-Auth-Token,Value:open-sesame
Key:User-Agent,Value:curl/7.29.0
Key:Host,Value:127.0.0.1:8080
Key:Accept,Value:*/*
Key:Content-Type,Value:

[root@dev 11.2.3]# curl 127.0.0.1:8080
403 Forbidden
Access was denied to this resource.
[root@dev 11.2.3]# python wsgi_paste.py /home/rabbitmq/restapi/11.2.3/api-paste.ini
...
Display wsgi request body:
...
Key:Content-Length,Value:0
Key:User-Agent,Value:curl/7.29.0
Key:Host,Value:127.0.0.1:8080
Key:Accept,Value:*/*
Key:Content-Type,Value:

