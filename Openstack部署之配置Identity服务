### 配置Identity服务 ###
第0部分:  Identity服务概念
第1部分:  安装Identity服务
第2部分:  定义用户,租户,角色
第3部分:  定义服务与API Endpoint
第4部分:  Identity服务验收

################################################ NO.0 Identity服务概念 #######################################################
Identity服务概念:
该服务执行如下功能:
(1) 用户管理.追踪用户及其权限.
(2) 服务目录.提供可用服务以及对应API Endpoint的目录.

在理解该服务之前,务必弄明白以下概念:
*用户
它是任何使用OpenStack云服务的个人,系统,服务的数码呈现; Identity服务验证验证来访请求;用户拥有登陆以及签名过的tokens去获取资
源. 用户可以直接被分配到一个特定租户下去,好似这些用户本来就是该组户的成员一般。

*凭据
仅仅被用户知道以自证身份的数据;在Identity Service中,e.g:用户名/密码,用户名/APIKey或者是被Identity Service认证的Token.

*认证
确认用户身份的举动;Identity Service根据来访发送请求的用户所提供的一组凭据来完成认证.
这些认证最初是用户名/密码,或用户名/APIKey. 作为对用户提供凭据的回应, Identity Service给用户签发经其认证的token,用户可持之完
成后续请求;

*Token(令牌)
包含任意bit的文本,用以获取资源;每个token包含其范围,该范围描述哪些资源是可以获取的。Token是有有效期的,任意时间都有可能被撤销.
尽管Identity Service在该版本中支持基于 token的认证, 但是它被期望在未来去支持更多的协议。目的是要整合服务是最重要的，而不是
仅仅成为一个成熟的身份存储和管理解决方案。

*Tenant(租户)
一个用来分组或隔离资源(或/和)身份对象的容器;根据服务操作者，一个租户可以被映射为一个客户,账号,组织或项目.

*Service(服务)
某项OpenStack服务,例如Compute(Nova),Object Storage(Swift),或Image Service(Glance).它提供至少一个API Endpoint供用户获取资源与
执行操作.

*Endpoint(端点)
一个可以通过网络访问的地址,通常是一个URL;该URL向你提供服务;如果使用模板扩展,你也可以创建端点模板，用以展示该区所有可用服务的
模板;

*Role(角色)
一个用户扮演可以执行一组特定操作的人物;一个角色包含一组权限。扮演该角色的用户自动继承该角色的所有权限;在 Identity Service, 一
个token就包含该用户所有可扮演的角色. 服务根据该用户所具有的全部角色以决定它有权限进行哪些操作，可以获取使用哪些资源;

最后举例详细说明Identity的工作原理:
(1) User/API 与 KEYSTONE 的交互:
    step1: 用户或者API向KEYSTONE发送凭据
    step2: KEYSTONE向用户或API发送临时token以及服务目录
    step3: 用户或者API 使用临时token向KEYSTONE请求租户列表
    step4: KEYSTONE向用户或API发送租户列表
    step5: 用户或者API 使用指定租户的凭据请求服务列表;
    step6: KEYSTONE向用户或API发送服务列表以及租户token;
(2) User/API 与 ENDPOINT 的交互:
    step1: User/API决定某需求(启动VM)所需要的服务端点,使用token向端点发送请求
    step2: 端点检验token是否有效,以及该token是否有使用该端点的权限
(3) Service 与 ENDPOINT 的交互:
    step1: 如果上述检查顺利，KEYSTONE将在token中添加额外信息,包括:
           a.该租户被授权访问该资源;
           b.token与请求相匹配;
           c.该token属于该租户
(4) Service 与 Service 的交互:
    step1: 服务根据策略检查请求
    step2: 如果策略允许,择执行该请求的事务;
(5) Service 与 User/API 的交互:
    step1: 服务向用户汇报执行执行进度,执行结果;

################################################ NO.1 安装Identity服务 #######################################################
理论部分:
(1) 在主控节点安装keystone,以及依赖库python-keystoneclient;
# yum install openstack-keystone python-keystoneclient -y

(2) 该服务使用数据库存储信息,在服务的配置文件中指定数据库的位置;在本例中,我们使用mysql数据库,用户名"keystone"; 使用合适的密码替换
KEYSTONE_DBPASS(前文已经用openssl生成并分配);
# openstack-config --set /etc/keystone/keystone.conf \
   database connection mysql://keystone:KEYSTONE_DBPASS@controller/keystone
(3) 使用之前登录的root用户密码,创建keystone用户:
$ mysql -u root -p
mysql> CREATE DATABASE keystone;
mysql> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \
  IDENTIFIED BY 'KEYSTONE_DBPASS';
mysql> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \
  IDENTIFIED BY 'KEYSTONE_DBPASS';
mysql> exit

(4) 为 Identity Service创建数据库数据表:
# su -s /bin/sh -c "keystone-manage db_sync" keystone

(5) 定义一个认证token作为共享密文在Identity Service与其他OpenStack服务键共享;使用 openssl 生成token并将其置于配置文件中:
# ADMIN_TOKEN=$(openssl rand -hex 10)
# echo $ADMIN_TOKEN
# openstack-config --set /etc/keystone/keystone.conf DEFAULT \
   admin_token $ADMIN_TOKEN

默认情况下,Keystone使用PKI tokens; 
(6) 创建签名keys以及证书,并设置对这些数据的访问权限;
# keystone-manage pki_setup --keystone-user keystone --keystone-group keystone
# chown -R keystone:keystone /etc/keystone/ssl
# chmod -R o-rwx /etc/keystone/ssl

(7) 启动Identity Service服务,并设置其开机自启:
# service openstack-keystone start
# chkconfig openstack-keystone on

(8) 默认情况下,Identity Service 会永远存储过期tokens.尽管在生产环境中可能用于审计, 不断增长的过期tokens会惊人地增加数据库
大小并,有可能,降低服务器性能,特别是在资源有限的测试环境下. 推荐做法是创建定时任务,每小时定时进行过期tokens的清理;
执行下述命令, 定时清除到期tokens,并输出log;
# (crontab -l -u keystone 2>&1 | grep -q token_flush) || \
echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' \
>> /var/spool/cron/keystone

实战部分:

################################################ NO.2 I定义用户,租户,角色 ####################################################
Define users, tenants, and roles

After you install the Identity Service, set up users, tenants, and roles to authenticate against. These are used to allow access to services and endpoints, described in the next section.

Typically, you would indicate a user and password to authenticate with the Identity Service. At this point, however, you have not created any users, so you have to use the authorization token created in an earlier step, see the section called “Install the Identity Service” for further details. You can pass this with the --os-token option to the keystone command or set the OS_SERVICE_TOKEN environment variable. Set OS_SERVICE_TOKEN, as well as OS_SERVICE_ENDPOINT to specify where the Identity Service is running. Replace ADMIN_TOKEN with your authorization token.

$ export OS_SERVICE_TOKEN=ADMIN_TOKEN
$ export OS_SERVICE_ENDPOINT=http://controller:35357/v2.0
 
Create an administrative user

Follow these steps to create an administrative user, role, and tenant. You will use this account for administrative interaction with the OpenStack cloud.

By default, the Identity Service creates a special _member_ role. The OpenStack dashboard automatically grants access to users with this role. You will give the admin user access to this role in addition to the admin role.

[Note]	Note
Any role that you create must map to roles specified in the policy.json file included with each OpenStack service. The default policy file for most services grants administrative access to the admin role.

Create the admin user:

$ keystone user-create --name=admin --pass=ADMIN_PASS --email=ADMIN_EMAIL
Replace ADMIN_PASS with a secure password and replace ADMIN_EMAIL with an email address to associate with the account.

Create the admin role:

$ keystone role-create --name=admin
Create the admin tenant:

$ keystone tenant-create --name=admin --description="Admin Tenant"
You must now link the admin user, admin role, and admin tenant together using the user-role-add option:

$ keystone user-role-add --user=admin --tenant=admin --role=admin
Link the admin user, _member_ role, and admin tenant:

$ keystone user-role-add --user=admin --role=_member_ --tenant=admin
 
Create a normal user

Follow these steps to create a normal user and tenant, and link them to the special _member_ role. You will use this account for daily non-administrative interaction with the OpenStack cloud. You can also repeat this procedure to create additional cloud users with different usernames and passwords. Skip the tenant creation step when creating these users.

Create the demo user:

$ keystone user-create --name=demo --pass=DEMO_PASS --email=DEMO_EMAIL
Replace DEMO_PASS with a secure password and replace DEMO_EMAIL with an email address to associate with the account.

Create the demo tenant:

$ keystone tenant-create --name=demo --description="Demo Tenant"
[Note]	Note
Do not repeat this step when adding additional users.

Link the demo user, _member_ role, and demo tenant:

$ keystone user-role-add --user=demo --role=_member_ --tenant=demo
 
Create a service tenant

OpenStack services also require a username, tenant, and role to access other OpenStack services. In a basic installation, OpenStack services typically share a single tenant named service.

You will create additional usernames and roles under this tenant as you install and configure each service.

Create the service tenant:

$ keystone tenant-create --name=service --description="Service Tenant"


################################################ NO.3 定义服务与API Endpoint #################################################
Define services and API endpoints

So that the Identity Service can track which OpenStack services are installed and where they are located on the network, you must register each service in your OpenStack installation. To register a service, run these commands:

keystone service-create. Describes the service.

keystone endpoint-create. Associates API endpoints with the service.

You must also register the Identity Service itself. Use the OS_SERVICE_TOKEN environment variable, as set previously, for authentication.

Create a service entry for the Identity Service:

$ keystone service-create --name=keystone --type=identity \
  --description="OpenStack Identity"
+-------------+----------------------------------+
|   Property  |              Value               |
+-------------+----------------------------------+
| description | OpenStack Identity               |
| id          | 15c11a23667e427e91bc31335b45f4bd |
| name        | keystone                         |
| type        | identity                         |
+-------------+----------------------------------+
The service ID is randomly generated and is different from the one shown here.

Specify an API endpoint for the Identity Service by using the returned service ID. When you specify an endpoint, you provide URLs for the public API, internal API, and admin API. In this guide, the controller host name is used. Note that the Identity Service uses a different port for the admin API.

$ keystone endpoint-create \
  --service-id=$(keystone service-list | awk '/ identity / {print $2}') \
  --publicurl=http://controller:5000/v2.0 \
  --internalurl=http://controller:5000/v2.0 \
  --adminurl=http://controller:35357/v2.0
+-------------+-----------------------------------+
|   Property  |             Value                 |
+-------------+-----------------------------------+
| adminurl    | http://controller:35357/v2.0      |
| id          | 11f9c625a3b94a3f8e66bf4e5de2679f  |
| internalurl | http://controller:5000/v2.0       |
| publicurl   | http://controller:5000/v2.0       |
| region      | regionOne                         |
| service_id  | 15c11a23667e427e91bc31335b45f4bd  |
+-------------+-----------------------------------+

################################################ NO.4 Identity服务验收 #######################################################
Verify the Identity Service installation

To verify that the Identity Service is installed and configured correctly, clear the values in the OS_SERVICE_TOKEN and OS_SERVICE_ENDPOINT environment variables:

$ unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT
These variables, which were used to bootstrap the administrative user and register the Identity Service, are no longer needed.

You can now use regular user name-based authentication.

Request a authentication token by using the admin user and the password you chose for that user:

$ keystone --os-username=admin --os-password=ADMIN_PASS \
  --os-auth-url=http://controller:35357/v2.0 token-get
In response, you receive a token paired with your user ID. This verifies that the Identity Service is running on the expected endpoint and that your user account is established with the expected credentials.

Verify that authorization behaves as expected. To do so, request authorization on a tenant:

$ keystone --os-username=admin --os-password=ADMIN_PASS \
  --os-tenant-name=admin --os-auth-url=http://controller:35357/v2.0 \
  token-get
In response, you receive a token that includes the ID of the tenant that you specified. This verifies that your user account has an explicitly defined role on the specified tenant and the tenant exists as expected.

You can also set your --os-* variables in your environment to simplify command-line usage. Set up a admin-openrc.sh file with the admin credentials and admin endpoint:

Select Text
1
2
3
4
export OS_USERNAME=admin
export OS_PASSWORD=ADMIN_PASS
export OS_TENANT_NAME=admin
export OS_AUTH_URL=http://controller:35357/v2.0
Source this file to read in the environment variables:

$ source admin-openrc.sh
Verify that your admin-openrc.sh file is configured correctly. Run the same command without the --os-* arguments:

$ keystone token-get
The command returns a token and the ID of the specified tenant. This verifies that you have configured your environment variables correctly.

Verify that your admin account has authorization to perform administrative commands:

$ keystone user-list
+----------------------------------+-------+---------+-------------------+
|                id                |  name | enabled |    email          |
+----------------------------------+-------+---------+-------------------+
| afea5bde3be9413dbd60e479fddf9228 | admin |   True  | admin@example.com |
| 32aca1f9a47540c29d6988091f76c934 |  demo |   True  | demo@example.com  |
+----------------------------------+-------+---------+-------------------+
$ keystone user-role-list --user admin --tenant admin
+----------------------------------+----------+----------------------------------+----------------------------------+
|                id                |   name   |             user_id              |            tenant_id             |
+----------------------------------+----------+----------------------------------+----------------------------------+
| 9fe2ff9ee4384b1894a90878d3e92bab | _member_ | afea5bde3be9413dbd60e479fddf9228 | e519b772cb43474582fa303da62559e5 |
| 5d3b60b66f1f438b80eaae41a77b5951 |  admin   | afea5bde3be9413dbd60e479fddf9228 | e519b772cb43474582fa303da62559e5 |
+----------------------------------+----------+----------------------------------+----------------------------------+
Seeing that the id in the output from the keystone user-list command matches the user_id in the keystone user-role-list command, and that the admin role is listed for that user, for the related tenant, this verifies that your user account has the admin role, which matches the role used in the Identity Service policy.json file.

[Note]	Note
As long as you define your credentials and the Identity Service endpoint through the command line or environment variables, you can run all OpenStack client commands from any machine. For details, see Chapter 4, Install and configure the OpenStack clients.
