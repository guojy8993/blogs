
1.计算节点虚拟机实例信息如下:
----------------------------------------------------------------------------------------------
NAME       NETWORK(fixed_ip,floating_ip)                   fixed_ip_mac       device
hyp-vm1    net-hyp=192.168.66.2          122.164.124.21    fa:16:3e:23:91:7b  tap156d4a84-8f
hyp-vm2    net-hyp=192.168.66.4          -                 fa:16:3e:61:d8:b7  tap9b3f4311-42
liyang-vm  net-liyang0993=192.168.100.3  122.164.124.45    fa:16:3e:6c:c9:bb  tap0620d5f8-02
----------------------------------------------------------------------------------------------
注: 虚拟机ip与网卡信息可以从dashboard以及计算节点的virsh管理工具收集,此处略.

2.虚拟机直连 linux bridge,每个虚拟机拥有独立的qbr.
[root@compute home]# brctl show
bridge name    bridge id         STP enabled  interfaces
qbr0620d5f8-02 8000.e2ac0a53cb2b no           qvb0620d5f8-02  tap0620d5f8-02
qbr156d4a84-8f 8000.62f2e45acb48 no           qvb156d4a84-8f  tap156d4a84-8f
qbr9b3f4311-42 8000.9ea9c59ddd0b no           qvb9b3f4311-42  tap9b3f4311-42
注: qbr是neutron安全组具体实现的地方,留待专题说明

3.qbr网桥上的qvb设备与br-int上某对应qvo设备以对等设备的形式直连
[root@compute home]# ovs-vsctl show
1db94f48-8307-4bad-b109-30897062c4e4
    """br-tun 信息略"""
    Bridge br-int
        fail_mode: secure
        Port patch-tun
            Interface patch-tun
                type: patch
                options: {peer=patch-int}
        Port br-int
            Interface br-int
                type: internal
        Port "qvo156d4a84-8f"
            tag: 2
            Interface "qvo156d4a84-8f"
        Port "qvo9b3f4311-42"
            tag: 1
            Interface "qvo9b3f4311-42"
        Port "qvo0620d5f8-02"
            tag: 2
            Interface "qvo0620d5f8-02"
    ovs_version: "2.4.0"

# 这里举例说明如何创建对等设备,linux网桥,开启,并设置属主(add-port/addif to ovs/bridge)
# ip link add qvb0620d5f8-02 type veth peer name qvob0620d5f8-02
# brctl add-br qbr0620d5f8-02
# ip link set qbr0620d5f8-02 up
# ip link set qvob0620d5f8-02 up
# ovs-vsctl add-port br-int qvob0620d5f8-02 -- set Port qvob0620d5f8-02 tag=2
# ovs-vsctl add-port qbr0620d5f8-02 qvb0620d5f8-02
这样就实现ovs虚拟交换机br-int与linux bridge - qbr 之间的链路互通.
在linux bridge(安全组网桥),br-int交换机,以及两者之间的链路建立之后我们把注意力放在br-int对 虚拟机(liyang-vm,
tap0620d5f8-02网卡的属主)inbound/outbound流量的处理上.
我们已经知道,在br-int上:
Port "qvo0620d5f8-02"
    tag: 2
    Interface "qvo0620d5f8-02"
那么这些信息作何解释? tag=2 是什么? tag 指的是 vlan tag,经此端口的流量,出则mod_vlan_vid,入则 strip_vlan.但是VLAN
ID为什么是2? 此处vlan tag 是本地vlan(在当前计算节点),而不是全局的(即整个集群).
liyang-vm 连接的是私有网络 net-liyang0993
[root@controller ~(keystone_admin)]# neutron net-list | grep liyang
| 6a169cca-282d-4bea-a99e-d725ac1721b9|net-liyang0993|1a7ed44b-e61d-4f98-aa47-d9123827acc2
192.168.100.0/24|

[root@controller ~(keystone_admin)]# neutron net-show 6a169cca-282d-4bea-a99e-d725ac1721b9
+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | True                                 |
| id                        | 6a169cca-282d-4bea-a99e-d725ac1721b9 |
| name                      | net-liyang0993                       |
| provider:network_type     | vxlan                                |
| provider:physical_network |                                      |
| provider:segmentation_id  | 10                                   |
| router:external           | False                                |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   | 1a7ed44b-e61d-4f98-aa47-d9123827acc2 |
| tenant_id                 | c9baab896503480b80919a4f0762dcf8     |
+---------------------------+--------------------------------------+
我们知道该私有网络VLANTag是根据配置的VNI范围(参考/etc/neutron/plugin.ini:vni_ranges=10:100)选取的最小的可用值.
那么我猜想链路中必须有br-int port的vlan-tag以及后续的br-tun tunnel_id以及provider:segmentation_id之间的转换处理,
留待后续探究.

4.OVS交换机br-int上的flow rules.
[root@compute ~]# ovs-ofctl dump-flows br-int
NXST_FLOW reply (xid=0x4):
cookie=0x0, duration=145733.004s, table=0, n_packets=238070, n_bytes=37626893, 
idle_age=0, hard_age=65534, priority=1 actions=NORMAL
cookie=0x0, duration=145732.923s, table=22, n_packets=0, n_bytes=0, idle_age=65534,
hard_age=65534, priority=0 actions=drop
很平常的两条流表规则:
(1)根据优先级,优先对流量执行Normal转发.
(2)table的数值不同代表当前规则属于不同的流表,处理不同的流量[流量归类,按表批量处理] ;
然后我们在看看br-int上的patch-tun,br-tun上的patch-int端口.
ovs虚拟交换机之间的会连是通过patch ports来实现的,下面举例说明br-int与br-tun如何实现链路互通.
[root@compute ~]#ovs-vsctl -- --if-exists del-port patch-tun -- add-port br-int \
                 patch-tun -- set Interface patch-tun type=patch options:peer=patch-int
[root@compute ~]#ovs-vsctl -- --if-exists del-port patch-int -- add-port br-tun \
                 patch-int -- set Interface patch-int type=patch options:peer=patch-tun
# 参考: http://blog.scottlowe.org/2012/11/27/connecting-ovs-bridges-with-patch-ports/
# 此处两ovs交换机互添patch ports将br-int与br-tun连接到一起

5.OVS交换机br-tun上的ofports与flow rules
    br-tun上的ofport信息如下:
    [root@compute home]# ovs-ofctl show br-tun
    OFPT_FEATURES_REPLY (xid=0x2): dpid:000056bb20081443
    n_tables:254, n_buffers:256
    capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
    actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src 
    mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst
     1(patch-int): addr:12:cc:14:b8:9a:67
         config:     0
         state:      0
         speed: 0 Mbps now, 0 Mbps max
     2(vxlan-0aa0006b): addr:42:9e:52:f8:0c:9a
         config:     0
         state:      0
         speed: 0 Mbps now, 0 Mbps max
     LOCAL(br-tun): addr:56:bb:20:08:14:43
         config:     PORT_DOWN
         state:      LINK_DOWN
         speed: 0 Mbps now, 0 Mbps max
    OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0

其次 , 需要了解, br-tun流表规则中不同的table 编号表示当前规则所属的表,表示不同的作用.
具体详见源码(neutron/plugins/openvswitch/common/constants.py)说明:

PATCH_LV_TO_TUN = 1
GRE_TUN_TO_LV = 2
VXLAN_TUN_TO_LV = 3
LEARN_FROM_TUN = 10
UCAST_TO_TUN = 20
FLOOD_TO_TUN = 21
CANARY_TABLE = 22
